{\rtf1}



  
  
  function calculateResidualMass(bodyWeight, residualPercentage) {
     if (bodyWeight <= 0 || residualPercentage < 0) {
      throw new Error("Invalid inputs: Body weight must be greater than 0 and residual percentage cannot be negative.");
     }
      
        return bodyWeight * residualPercentage;
  }
  const residualMass = calculateResidualMass(bodyWeight, residualPercentage);
      
  console.log(`Residual Mass: ${residualMass.toFixed(2)} kg`);
      
  
  function calculateBoneMass(weight, height, gender) {
        // Gender-specific coefficients (example values)
    const coefficients = {
      Male: 0.2,   // Example coefficient for males
      Female: 0.17 // Example coefficient for females
    };
      
    if (weight <= 0 || height <= 0) {
      throw new Error("Invalid inputs: Weight and height must be greater than 0.");
    }
      
    if (!coefficients[gender]) {
      throw new Error("Invalid gender: Please specify 'Male' or 'Female'.");
    }
      
      const coefficient = coefficients[gender];
      const boneMass = coefficient * weight * height;
      
    return boneMass;    
  }
  const boneMass = calculateBoneMass(bodyWeight, height, gender);
  
  console.log(`Bone Mass: ${boneMass.toFixed(2)} kg`);
      
  
  
  function calculateMasaOsea(estatura, diametroBiestiloideo, diametroBiepicondileo) {
    // Calculate estatura squared
    const estaturaCuadrada = estatura ** 2;
      
    // Apply the formula
    const masaOsea = 3.02 * (estaturaCuadrada * diametroBiestiloideo * diametroBiepicondileo);
      
    return masaOsea;
  }
  const MasaOsea = calculateMasaOsea(height, diametroBiestiloideo, diametroBiepicondileo)
  console.log(MasaOsea)
  
  
  function calculateSkinMass(weight, height, gender) {
    // Gender-specific coefficients (example values)
    const coefficients = {
      Male: 0.15,   // Example coefficient for males
      Female: 0.14  // Example coefficient for females
    };    
    
    if (weight <= 0 || height <= 0) {
      throw new Error("Invalid inputs: Weight and height must be greater than 0.");
    }
  
    if (!coefficients[gender]) {
      throw new Error("Invalid gender: Please specify 'Male' or 'Female'.");
    }    
    
    const coefficient = coefficients[gender];
    const skinMass = coefficient * weight * height;
    
    return skinMass;
        
  }
    const skinMass = calculateSkinMass(bodyWeight, height, gender);
    console.log(`Skin Mass: ${skinMass.toFixed(2)} kg`);
    
    
  
  function calculateMuscleMassAndScore(weight, bodyFat, gender) {
      // Gender-specific coefficients for muscle mass calculation (example values)
      const coefficients = {
          Male: 0.45,   // Example coefficient for males
          Female: 0.42  // Example coefficient for females
      };
  
      // Scoring ranges (example thresholds)
      const scoringRanges = {
          Male: [
              { max: 30, score: 5, classification: "Low" },
              { max: 40, score: 7, classification: "Normal" },
              { max: 50, score: 9, classification: "High" }
          ],
          Female: [
              { max: 25, score: 5, classification: "Low" },
              { max: 35, score: 7, classification: "Normal" },
              { max: 45, score: 9, classification: "High" }
          ]
      };
  
      if (weight <= 0 || bodyFat < 0) {
          throw new Error("Invalid inputs: Weight must be greater than 0, and body fat cannot be negative.");
      }
  
      if (!coefficients[gender] || !scoringRanges[gender]) {
          throw new Error("Invalid gender: Please specify 'Male' or 'Female'.");
      }
  
      // Calculate muscle mass
      const coefficient = coefficients[gender];
      const muscleMass = coefficient * (weight - bodyFat);
  
      // Determine score based on ranges
      const ranges = scoringRanges[gender];
      let scoreDetails = { score: 0, classification: "Unknown" };
  
      for (const range of ranges) {
          if (muscleMass <= range.max) {
              scoreDetails = { score: range.score, classification: range.classification };
              break;
          }
      }
  
      return {
          muscleMass: muscleMass.toFixed(2),
          ...scoreDetails
      };
  }
  
  const result = calculateMuscleMassAndScore(bodyWeight, bodyFat, gender);
  
  console.log(`Muscle Mass: ${result.muscleMass} kg, Score: ${result.score}, Classification: ${result.classification}`);
  
  
  
  
  function calculateWaistCircumferenceScore(waistCircumference, gender) {
    // Gender-specific scoring ranges (example values)
    const scoringRanges = {
        Male: [
            { max: 90, score: 9, classification: "Excellent" },
            { max: 100, score: 7, classification: "Good" },
            { max: 110, score: 5, classification: "Average" },
            { max: Infinity, score: 3, classification: "Poor" }
        ],
        Female: [
            { max: 80, score: 9, classification: "Excellent" },
            { max: 90, score: 7, classification: "Good" },
            { max: 100, score: 5, classification: "Average" },
            { max: Infinity, score: 3, classification: "Poor" }
        ]
    };
  
    if (waistCircumference <= 0) {
        throw new Error("Invalid input: Waist circumference must be greater than 0.");
    }
  
    if (!scoringRanges[gender]) {
        throw new Error("Invalid gender: Please specify 'Male' or 'Female'.");
    }
  
    // Determine score and classification based on ranges
    const ranges = scoringRanges[gender];
    let result = { score: 0, classification: "Unknown" };
  
    for (const range of ranges) {
        if (waistCircumference <= range.max) {
            result = { score: range.score, classification: range.classification };
            break;
        }
    }
  
    return result;
  }
  
  const Cresult = calculateWaistCircumferenceScore(waistCircumference, gender);
  
  console.log(`Score: ${Cresult.score}, Classification: ${Cresult.classification}`);
  
  
  

  
  
 
  
  
  
  
  
  
































  function classifyBodyFat(age, gender, bodyFat) {
    const ranges = {
      male: {
        "13-19": [
          { max: 12, classification: "Excellent", scoring: 9, metabolicProtection: 1 },
          { max: 13, classification: "Good", scoring: 8.3572, metabolicProtection: 0.928578 },
          { max: 14, classification: "Good", scoring: 7.71439, metabolicProtection: 0.857154 }
          // Add additional ranges
        ],
        "60+": [
          { max: 21, classification: "Excellent", scoring: 9, metabolicProtection: 1 },
          { max: 22, classification: "Good", scoring: 8.3572, metabolicProtection: 0.928578 },
          { max: 23, classification: "Bad", scoring: 7.71439, metabolicProtection: 0.857154 }
          // Add additional ranges
        ]
      },
      female: {
        "13-19": [
          { max: 17, classification: "Excellent", scoring: 9, metabolicProtection: 1 },
          { max: 18, classification: "Good", scoring: 8.4705, metabolicProtection: 0.941167 },
          { max: 19, classification: "Bad", scoring: 7.941, metabolicProtection: 0.882333 }
          // Add additional ranges
        ],
        "60+": [
          { max: 25, classification: "Excellent", scoring: 9, metabolicProtection: 1 },
          { max: 26, classification: "Good", scoring: 8.4705, metabolicProtection: 0.941167 },
          { max: 27, classification: "Bad", scoring: 7.941, metabolicProtection: 0.882333 }
          // Add additional ranges
        ]
      }
    };
  
    // Determine the age group
    const ageGroup = age <= 19 ? "13-19" : "60+";
    const genderKey = gender.toLowerCase();
  
    // Validate ranges and inputs
    if (!ranges[genderKey] || !ranges[genderKey][ageGroup]) {
      return { error: "No classification found for the given inputs." };
    }
  
    // Find the classification
    for (const range of ranges[genderKey][ageGroup]) {
      if (bodyFat <= range.max) {
        return {
          classification: range.classification,
          scoring: range.scoring,
          metabolicProtection: range.metabolicProtection
        };
      }
    }
  
    return { error: "Body fat percentage out of range." };
  }
  // Call the function and log the result
  const CBF = classifyBodyFat(age, gender, bodyFat)

  
  function renderImage(imageUrl, altText = "Image") {
    // Get the div with id "scoring"
    const scoringDiv = document.getElementById('scoring');
    
    if (!scoringDiv) {
      console.error('Div with id "scoring" not found');
      return;
    }
    
    // Create an image element
    const img = document.createElement('img');
    img.src = imageUrl;
    img.alt = altText;
    img.style.margin = "10px"; // Optional: Add spacing between images
    
    // Append the image to the div
    scoringDiv.appendChild(img);
  }
  
  function renderCBF() {
   
  
    // Classification logic
    const classification = CBF.classification; // Replace with your dynamic value
    
    if (classification === "Excellent") {
      renderImage('images/WebApp/Evaluation/EColor.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/BLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/ProLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/PLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/MLight.svg', 'Example Image');
    } else if (classification === "Good") {

      renderImage('images/WebApp/Evaluation/ELight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/BColor.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/ProLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/PLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/MLight.svg', 'Example Image');
    } else {

      renderImage('images/WebApp/Evaluation/ELight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/BLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/ProLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/PLight.svg', 'Example Image');
      renderImage('images/WebApp/Evaluation/MColor.svg', 'Example Image');
    }
  }
  




  function renderMPProgress() {
      const maxScore = 9;
      const currentScore = CBF.scoring
  
       // Calculate the progress percentage
       const progressPercentage = (currentScore / maxScore) * 100;

       // Get the progress-fill element
       const progressFill = document.getElementById("metabolicProtection");
   
       // Set the width style based on the progress percentage
       if (progressFill) {
           progressFill.style.width = `${progressPercentage}%`;
       }
   }
   
   // Call the function to render the progress bar
   renderMPProgress();
  // Call renderCBF to execute the code
  renderCBF();
  


  console.log(classifyBodyFat(age, gender, bodyFat));
  
  

















  
async function getProgressBarColor() {
  try {
    // Reference a document in the "revoFitweb" collection with ID "landing"
    const docRef = doc(db, 'RevoBuissnes', transferredInfo);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      const documentData = docSnap.data(); // Store document data
      return documentData; // Return the data for external use
    } else {
      console.log("No such document!");
      return null; // Return null if no document is found
    }
  } catch (error) {
    console.error("Error fetching document:", error);
  }
}

getProgressBarColor().then((data) => {
  const UBU = data.UBU;
  const {Base, Prime1, Prime2, Prime3} = UBU.Colors;

  function changeBackgroundColor(color, urlId ) {
    const element = document.getElementById(urlId );
    if (element) {
        element.style.backgroundColor = color;
    } else {
        console.error('Element with id "metabolicProtection" not found.');
    }
  }

// Example usage:
changeBackgroundColor(Base, 'metabolicProtection'); 
changeBackgroundColor(Prime2, 'progressbar');
  



})


document.getElementById('BFB').addEventListener('click', function () {
  const bfBlock = document.getElementById('BFBlock');
  bfBlock.classList.toggle('visible');
});


// Bottom Icons
async function getBtnIcons() {
  try {
    const docRef = doc(db, "RevoBuissnes", transferredInfo);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      const documentData = docSnap.data();
      return documentData; // Return the document data
    } else {
      console.log("No such document!");
      return null;
    }
  } catch (error) {
    console.error("Error fetching document:", error);
    return null;
  }
}
getBtnIcons().then((data) => {
  const App = data.App;
  const Btns = App.Btns;

  function createButton(buttonType, divId, imgSrcIndex, redirectUrl, imgAlt = "Example image") {
    const buttonGroup = Btns[buttonType];
    const imgSrc = buttonGroup[imgSrcIndex];

    const div = document.getElementById(divId);
    if (!div) {
      console.error(`Div with id '${divId}' not found.`);
      return;
    }

    const img = document.createElement("img");
    img.src = imgSrc;
    img.alt = imgAlt;
    img.addEventListener("click", () => {
      window.location.href = redirectUrl;
    });

    div.appendChild(img);
  }

  const buttonsConfig = [
    { buttonType: "homeBtns", divId: "home", imgSrcIndex: 0, redirectUrl: "index9.html" },
    { buttonType: "DateBtns", divId: "Date", imgSrcIndex: 1, redirectUrl: "index9.2.html" },
    { buttonType: "GoalBtns", divId: "goals", imgSrcIndex: 1, redirectUrl: "index9.3.html" },
    { buttonType: "StatBtns", divId: "stats", imgSrcIndex: 1, redirectUrl: "index9.4.html" },
    { buttonType: "GearBtns", divId: "gear", imgSrcIndex: 1, redirectUrl: "index9.5.html" },
  ];

  buttonsConfig.forEach(({ buttonType, divId, imgSrcIndex, redirectUrl }) => {
    createButton(buttonType, divId, imgSrcIndex, redirectUrl);
  });
});