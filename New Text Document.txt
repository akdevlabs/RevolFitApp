
/**
 * Calculates oxygen consumption and assigns a score based on predefined ranges.
 * @param {number} distance - The distance covered in meters.
 * @param {number} time - The time taken in minutes.
 * @param {number} weight - The weight of the person in kilograms.
 * @param {string} gender - The gender of the person ("Male" or "Female").
 * @returns {object} - The oxygen consumption and corresponding score.
 */
function calculateOxygenConsumption(distance, time, weight, gender) {
  // Gender-specific coefficients for oxygen consumption (example values)
  const coefficients = {
      Male: 0.2,   // Example coefficient for males
      Female: 0.18 // Example coefficient for females
  };

  // Scoring ranges (example thresholds)
  const scoringRanges = [
      { max: 25, score: 3, classification: "Low" },
      { max: 35, score: 5, classification: "Moderate" },
      { max: 50, score: 7, classification: "Good" },
      { max: Infinity, score: 9, classification: "Excellent" }
  ];

  if (distance <= 0 || time <= 0 || weight <= 0) {
      throw new Error("Invalid inputs: Distance, time, and weight must be greater than 0.");
  }

  if (!coefficients[gender]) {
      throw new Error("Invalid gender: Please specify 'Male' or 'Female'.");
  }

  // Calculate oxygen consumption (VO2 max)
  const coefficient = coefficients[gender];
  const oxygenConsumption = coefficient * (distance / time) * weight;

  // Determine score based on ranges
  let scoreDetails = { score: 0, classification: "Unknown" };

  for (const range of scoringRanges) {
      if (oxygenConsumption <= range.max) {
          scoreDetails = { score: range.score, classification: range.classification };
          break;
      }
  }

  return {
      oxygenConsumption: oxygenConsumption.toFixed(2),
      ...scoreDetails
  };
}

// Example usage:
const distance = 2000; // meters
const time = 10; // minutes
const weight = 70; // kg
const gender = "Male"; // or "Female"
const result = calculateOxygenConsumption(distance, time, weight, gender);

console.log(`Oxygen Consumption: ${result.oxygenConsumption} ml/kg/min, Score: ${result.score}, Classification: ${result.classification}`);








/**
 * Calculates the blood pressure score based on systolic and diastolic values.
 * @param {number} systolic - The systolic blood pressure in mmHg.
 * @param {number} diastolic - The diastolic blood pressure in mmHg.
 * @returns {object} - The blood pressure category, score, and classification.
 */
function calculateBloodPressureScore(systolic, diastolic) {
  // Blood pressure ranges and scores
  const scoringRanges = [
      { systolicMax: 119, diastolicMax: 79, score: 9, classification: "Normal" },
      { systolicMax: 129, diastolicMax: 79, score: 7, classification: "Elevated" },
      { systolicMax: 139, diastolicMax: 89, score: 5, classification: "Hypertension Stage 1" },
      { systolicMax: Infinity, diastolicMax: Infinity, score: 3, classification: "Hypertension Stage 2" },
      { systolicMin: 180, diastolicMin: 120, score: 1, classification: "Hypertensive Crisis" }
  ];

  if (systolic <= 0 || diastolic <= 0) {
      throw new Error("Invalid inputs: Systolic and diastolic values must be greater than 0.");
  }

  // Determine the category and score
  for (const range of scoringRanges) {
      const isInCrisis = systolic >= (range.systolicMin || 0) && diastolic >= (range.diastolicMin || 0);
      const isInRange =
          systolic <= range.systolicMax &&
          diastolic <= range.diastolicMax;

      if (isInRange || isInCrisis) {
          return {
              score: range.score,
              classification: range.classification
          };
      }
  }

  // Default if no range matches
  return {
      score: 0,
      classification: "Unknown"
  };
}

// Example usage:
const systolic = 125; // mmHg
const diastolic = 85; // mmHg
const result = calculateBloodPressureScore(systolic, diastolic);

console.log(`Score: ${result.score}, Classification: ${result.classification}`);













































































clear();





async function backgroundColor() {
  try {
    const docRef = doc(db, "RevoBuissnes", transferredInfo); // Ensure db and transferredInfo are initialized
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      const documentData = docSnap.data();
      return documentData; // Return the document data
    } else {
      console.error("No such document!");
      return null;
    }
  } catch (error) {
    console.error("Error fetching document:", error);
    return null;
  }
}



backgroundColor().then((data) => {
  const UBU = data.UBU;
  const { top, center, bottom } = UBU.BackgroundColor;
  const { Base, Prime1, Prime2, Prime3 } = UBU.Colors;
// Function to change the background gradient dynamically
function setGradient(color1, color2, color3) {
  document.body.style.background = `linear-gradient(to bottom, ${color1}, ${color2}, ${color3})`;
}

// Example usage:
setGradient(top, center, bottom);

});

















































































































 function renderMealPlan(){
      const {Breakfast, Dinner, Lunch, Snack} = selectOption()



      function renderStartMeals(){
       const breakfast = Breakfast.slot1
       const dinner  = Dinner.slot1
       const lunch  = Lunch.slot1
       const snack  = Snack.slot1

      createMealPlanDishes(Cat[0], breakfast.time, breakfast.img)
      createMealPlanDishes(Cat[1], dinner.time, dinner.img)
      createMealPlanDishes(Cat[2], lunch.time, lunch.img)
      createMealPlanDishes(Cat[3], snack.time, snack.img)
      }

     
      
      function renderBreakfastoptions(){
        const {slot1, slot2, slot3} = Breakfast
      createMealPlanDishes(slot1.tittle, slot1.tittle, slot1.img )
      createMealPlanDishes(slot2.tittle, slot2.tittle, slot2.img )
      createMealPlanDishes(slot3.tittle, slot3.tittle, slot3.img )
      }

      function renderDinneroptions(){
        const {slot1, slot2, slot3} = Dinner
      createMealPlanDishes(slot1.tittle, slot1.tittle, slot1.img )
      createMealPlanDishes(slot2.tittle, slot2.tittle, slot2.img )
      createMealPlanDishes(slot3.tittle, slot3.tittle, slot3.img )
      }

      function renderLunchoptions(){
        const {slot1, slot2, slot3} = Lunch
      createMealPlanDishes(slot1.tittle, slot1.tittle, slot1.img )
      createMealPlanDishes(slot2.tittle, slot2.tittle, slot2.img )
      createMealPlanDishes(slot3.tittle, slot3.tittle, slot3.img )
      }

      function renderSnackoptions(){
        const {slot1, slot2, slot3} = Snack
      createMealPlanDishes(slot1.tittle, slot1.tittle, slot1.img )
      createMealPlanDishes(slot2.tittle, slot2.tittle, slot2.img )
      createMealPlanDishes(slot3.tittle, slot3.tittle, slot3.img )
      }



      function multybtnSelector(){

        
        // Add a click event listener to the section
        const mealPlanBtnsSection = document.querySelector(".MealPlanBtns");
       
        if (mealPlanBtnsSection) {
          // Variable to track the active function
          let currentActiveFunction = renderStartMeals; // Initially set to the default function
      
          // Initially run the default state
          renderStartMeals();
          console.log("Default state: Starting meals");
      
          mealPlanBtnsSection.addEventListener("click", function (event) {
              // Get the clicked element
              const clickedItem = event.target;
      
              // Ensure an element was clicked
              if (clickedItem) {
                  console.log(`Clicked item: ${clickedItem.tagName}, Text: "${clickedItem.textContent.trim()}"`);
      
                  const activeMeal = clickedItem.textContent.trim();
      
                  // Check the meal type and call appropriate functions
                  switch (activeMeal) {
                      case "Desayuno":
                          if (currentActiveFunction !== renderBreakfastoptions) {
                              currentActiveFunction = renderBreakfastoptions; // Update active function
                              renderBreakfastoptions();
                              console.log("Green: Breakfast options active");
                          }
                          break;
      
                      case "Almuerzo":
                          if (currentActiveFunction !== renderLunchoptions) {
                              currentActiveFunction = renderLunchoptions; // Update active function
                              renderLunchoptions();
                              console.log("Yellow: Lunch options active");
                          }
                          break;
      
                      case "Cena":
                          if (currentActiveFunction !== renderDinneroptions) {
                              currentActiveFunction = renderDinneroptions; // Update active function
                              renderDinneroptions();
                              console.log("Black: Dinner options active");
                          }
                          break;
      
                      case "Snack":
                          if (currentActiveFunction !== renderSnackoptions) {
                              currentActiveFunction = renderSnackoptions; // Update active function
                              renderSnackoptions();
                              console.log("Gray: Snack options active");
                          }
                          break;
      
                      default:
                          if (currentActiveFunction === renderStartMeals) {
                              console.log("Default state is already active.");
                          } else {
                              console.log("Invalid option selected.");
                          }
                  }
              }
          });
      }
      
      
      
      
      
      


       

      }
      multybtnSelector()


     
      








    }

    renderMealPlan()






















    <div class="MealPlanBlock">

        <div class="hiddenDiv"  id="HMO">
          <a value="vegetarian">Vegetariano</a>
          <a value="vegan">Vegano</a>
        </div>

        <div class="hiddenDiv" id="CMO">
          <a value="breakfast">Desayuno</a>
          <a value="lunch">Almuerzo</a>
          <a value="dinner">Cena</a>
          <a value="snack">Snack</a>
        </div>
      </div>